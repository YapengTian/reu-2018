<!--
  MTurk UI that takes .csv with youtube id, start time, end time, and labels
  and displays said video (should be 1sec) to the user repeatedly
  
  Justin Goodman
  Marc Moore
  -->
<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/>
<meta content="width=device-width,initial-scale=1" name="viewport" />
<script type='text/javascript' src='https://s3.amazonaws.com/mturk-public/externalHIT_v1.js'></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

<!-- Instructions -->
<section class="container">
  <div class="row justify-content-center">
    <div class="panel-body" id="instructionBody">
      <h1>Instructions:</h1>
      <p>There are two parts to this task.</p>
      <p>We will be showing you a 10 second clip from a YouTube video. Look at the label provided for the video. <b>For each 1 second segment, please indicate whether the event or object from the label appears in the segment</b>. Each box under the video indicates a 1 second segment. If the label is present in a segment click the box for that segment. You can click and drag to select multiple boxes. Under each box is a button that seeks to that segment of the clip. Please have the sound enabled on your machine and be ready to listen to the clip. You should click 'Play Video' when you are ready to play the clip. The clip will then auto-play on repeat until you click 'Pause Clip'. <b>Controls in the YouTube player are disabled</b>. We disabled the controls so we can show you one specific part of the video.</p>
      <ul>
        <li>To highlight a box, you would left click the box. To un-highlight a highlighted box, you would left click the box again. You can click and drag to highlight (and un-highlight) multiple boxes. When the video is playing, you should see a darker red in the box that the video is currently on. Here are the colors with their respective meaning:
          <br />
          <center>
            <table>
              <tr height="50px">
                <td width="200px" style="border: 1px solid black"></td>
                <td width="30px"></td>
                <td width="200px" class="selected" style="border: 1px solid black"></td>
                <td width="30px"></td>
                <td width="200px" class="current" style="border: 1px solid black"></td>
                <td width="30px"></td>
                <td width="200px" class="selected current" style="border: 1px solid black"></td>
              </tr>
              <tr>
                <td>Not Selected</td>
                <td></td>
                <td>Selected</td>
                <td></td>
                <td>Not Selected</td>
                <td></td>
                <td>Selected</td>
              </tr>
              <tr>
                <td>Video Not Playing Here</td>
                <td></td>
                <td>Video Not Playing Here</td>
                <td></td>
                <td>Video Playing Here</td>
                <td></td>
                <td>Video Playing Here</td>
              </tr>
            </table>
          </center>
        </li>
        <li>Only watch the clip given, do not watch anything before or after the clip.</li>
        <li>Example: if the label is 'Oink' and you see a pig in the clip and the pig oinks during the fourth and fifth second, you would highlight the fourth and fifth box.</li>
        <li>Example: if the label is 'Speech' and you see a person about to give a speech but that person never actually speaks during the clip, you would highlight nothing.</li>
      </ul>
      <p>*Bad video: A video is bad if ... . You should check the box below the selection-table if a video was bad quality. We need high quality audio-visual events in our dataset, so this simple screening is very important.</p>
    </div>
  </div>
  <!-- End Instructions -->
  <hr />
  <!-- Video matching layout -->
  <div class="row" id="workContent">
    <div class="col-sm">
      <h4>Label for this video: <b>${labels}</b></h4>
      <center>
        <iframe id="player" width="640" height="360" src="https://www.youtube.com/embed/${ytid}?enablejsapi=1&amp;start=${start}&amp;end=${end}"></iframe>
        <br />
        <button class="btn btn-primary" onclick="play(this);" type="button" style="margin: 10px;">Play Video</button>
        <!-- Worker input -->
        
        <div class="form-check">
          <label class="form-check-label">
            <input class="form-check-input" type="checkbox" name="bad" />
            This is a bad* video
          </label>
        </div>
        <br />
        <table id="response-bar" onmouseup="stop();" ondragstart="return false;" ondrop="return false;" width="640px"></table>
        <input type="submit" id="submitButton" class="submit btn btn-primary" value="Submit Answer" />
      </center>
      <br />
      <div id="response-form" class="form-group" style="display: none;">
        <!-- why are you looking here, get out! -->
        <input name="identifier" type="hidden" value="temporal" />
        <input name="ytid" type="hidden" value="${ytid}" />
        <input name="qa" type="hidden" value="0" id="dummy" />
      </div>
    </div>
  </div>
</section>
<!-- End Video matching layout -->

<!-- Open internal style sheet -->
<style type="text/css">
  #submitButton {
  white-space: normal;
  }
  /* CSS for breaking long words/urls */
  .dont-break-out {
  overflow-wrap: break-word;
  word-wrap: break-word;
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -ms-hyphens: auto;
  -moz-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
  }
</style>
<!-- REU-2018 style code -->
<style>
  .selected {
    background: rgba(0, 0, 255, 0.8);
  }
  .current {
    background: rgba(255, 255, 0, 0.8);
  }
  .selected.current {
    background: rgba(69, 255, 69, 0.9);
  }
  table {
    margin-bottom: 10px;
    border-collapse: collapse;
    text-align: center;
  }
  #rowOne > td {
  border: 1px solid blue;
    height: 50px;
  }
  #rowTwo > td {
    border-style: none;
    margin-bottom: 10px;
  }
  td > button {
    margin-top: 5px;
  }
</style>
<!-- End REU-2018 style code -->
<!-- End internal style sheet -->
<!-- External JS references -->
<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<!-- REU-2018 script code -->
<script>
  var timer;
  function secToMin(time) {
    var min = Math.floor(time / 60);
    var sec = time - min * 60;
    return min + ":" + sec
  }
  // generate response bar and corresponding form data
  // NOTE: assuming 1-second window. Change this if the window length changes!
  // NOTE: also assuming 1-second intervals. Change this if the interval changes!
  var num_cells = ${end} - ${start} // divided by window
  var i;
  var tbl = document.getElementById("response-bar");
  var form = document.getElementById("response-form");
  var tbl_row = document.createElement("tr");
  tbl_row.id = "rowOne";
  var info_row = document.createElement("tr");
  info_row.id = "rowTwo";
  for (i = 0; i < num_cells; i++) {
    // table
    var tbl_col = document.createElement("td");
    tbl_col.id = "loc-" + i;
    tbl_col.setAttribute("onmouseover", "hover(" + i + ");");
    tbl_col.setAttribute("onmousedown", "start(" + i + ");");
    tbl_col.setAttribute("data-selected", false)
    tbl_row.appendChild(tbl_col);
    // info (still table)
    var info_col = document.createElement("td");
    var but = document.createElement("button");
    but.classList.add("btn", "btn-primary");
    but.setAttribute("type", "button");
    but.setAttribute("onclick", "seek(" + i + ");");
    but.innerHTML = secToMin(${start} + i);
    info_col.appendChild(but);
    info_row.appendChild(info_col);
    // form
    var input = document.createElement("input");
    input.id = "input-" + i;
    input.setAttribute("name", "loc-" + i);
    input.setAttribute("type", "hidden");
    input.setAttribute("value", "0");
    form.appendChild(input);
  }
  tbl.appendChild(tbl_row);
  tbl.appendChild(info_row);
  // handler code for time-step coloring
  var selector = false;
  var eraser = false;
  function start(num) {
    selector = true;
    eraser = toBool(document.getElementById("loc-" + num).getAttribute("data-selected"));
    hover(num);
  }
  function stop() {
    selector = false;
    // update form data to match selected boxes
    for (i = 0; i < num_cells; i++) {
      var ele = document.getElementById("input-" + i);
      if (toBool(document.getElementById("loc-" + i).getAttribute("data-selected"))) {
        ele.value = 1;
      } else {
        ele.value = 0;
      }
    }
  }
  // self explanatory...
  function toBool(str) {
    return str == 'true';
  }
  function clearSelection() {
    for (i = 0; i < num_cells; i++) {
      var ele = document.getElementById("loc-" + i);
      ele.setAttribute("data-selected", false);
      ele.setAttribute("class", "");
    }
    stop();
  }
  function hover(num) {
    if (selector) {
      var ele = document.getElementById("loc-" + num);
      if (eraser) {
        ele.setAttribute("data-selected", false);
        ele.classList.remove("selected");
      } else {
        ele.setAttribute("data-selected", true);
        ele.classList.add("selected");
      }
    }
  }
  // load youtube api
  var tag = document.createElement('script');
  tag.id = 'yt-api';
  tag.src = 'https://www.youtube.com/iframe_api';
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // create the video
  var player;
  window.onYouTubeIframeAPIReady = function() {
    player = new YT.Player('player', {events: {'onReady': ready, 'onStateChange': change}} );
  }

  // control functions
  function ready(event) {
    player.getIframe().setAttribute("style", "pointer-events: none;");
    if (player.isMuted()) {
      player.unMute();
    }
  }
  function change(event) {
    if (event.data == YT.PlayerState.ENDED) {
      player.loadVideoById({'videoId': '${ytid}','startSeconds': ${start},'endSeconds': ${end},'suggestedQuality': 'large'});
    }
  }
  var prev = -1;
  function vidStatus() {
    var t = Math.floor(player.getCurrentTime()) - ${start} + 0; // current time in video - start time for clip
    if (t != prev) {
      prev = t;
      for (i = 0; i < ${end} - ${start}; i++) {
        var b = document.getElementById("loc-" + i);
        if (i == t) {
          b.classList.add("current");
        } else {
          b.classList.remove("current");
        }
      }
    }
    timer = setTimeout(vidStatus, 100);
  }
  var first = true;
  function play(ele) {
    player.playVideo();
    if (first) {
      first = false;
      document.getElementById("dummy").setAttribute("value", "1");
    }
    ele.setAttribute("onclick", "pause(this);");
    ele.textContent = "Pause Video";
    vidStatus();
  }
  function pause(ele) {
    player.pauseVideo();
    ele.setAttribute("onclick", "play(this);");
    ele.textContent = "Play Video";
    clearTimeout(timer);
  }
  function seek(num) {
    //player.loadVideoById({'videoId': '${ytid}','startSeconds': ${start} + num,'endSeconds': ${end},'suggestedQuality': 'large'});
    player.seekTo(${start} + num);
    if (first) {
      player.pauseVideo();
    }
  }
</script>
<!-- End REU script -->
